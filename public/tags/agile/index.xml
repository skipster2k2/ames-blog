<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agile on Ames World</title>
    <link>https://ames.world/tags/agile/</link>
    <description>Recent content in agile on Ames World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Mon, 31 Dec 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://ames.world/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improving &#39;Find&#39; for the Find Property Information Service</title>
      <link>https://ames.world/posts/improving-find-for-the-find-property-information-service/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ames.world/posts/improving-find-for-the-find-property-information-service/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://search-property-information.service.gov.uk/&#34;&gt;Find Property Information&lt;/a&gt; is a GOV.UK service being developed by HM Land Registry which aims to provide a simple summary of property information. Recently we have improved our ‘postcode search’ functionality.&lt;/p&gt;
&lt;h2 id=&#34;why-did-we-do-this&#34;&gt;Why did we do this?&lt;/h2&gt;
&lt;p&gt;Our first iteration of searching was developed over a year ago, we knew the limitations of it, but it was ‘good enough’ for the early stages of the service. This allowed us to move onto developing other features. Since then the quality of search has crept up the list of user issues.&lt;/p&gt;
&lt;h2 id=&#34;what-were-the-problems-with-the-old-search&#34;&gt;What were the problems with the old search?&lt;/h2&gt;
&lt;p&gt;There was a mixture of design and technical issues with our old search:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When users come to the service they think in terms of addresses, but our search results displayed land titles. This meant the results were jarring, it was especially unclear if there was more than one ‘title’ for a given address.&lt;/li&gt;
&lt;li&gt;We hadn’t updated the address information we get from Ordnance Survey for over a year, so new builds wouldn’t show in the service.&lt;/li&gt;
&lt;li&gt;Search results were confusing because of the order of the displayed addresses.&lt;/li&gt;
&lt;li&gt;We limited search results to a maximum of 50 on the false assumption this was the terms of the Ordnance Survey Addressbase licence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/search_results_before.jpg&#34; alt=&#34;&#34; title=&#34;Search results before improvement, results were ‘titles’ rather than addresses - which the user searched for - causing confusion.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-did-we-improve-it&#34;&gt;How did we improve it?&lt;/h2&gt;
&lt;p&gt;Based on feedback we’d been collecting we had a good handle on the types of problems people had, and a strong hypothesis that people would be more successful if we flipped the results. We aimed to stop showing what we have got (how we’ve documented the world), and start showing a familiar model of places (how user’s think of the world).&lt;/p&gt;
&lt;p&gt;People are familiar with what a postcode is, and what it contains — they use this all the time, when they are getting a parcel delivered, or sending a letter, or using their satnav.
There is a point at which we, currently, ask people to pick a particular property record.&lt;/p&gt;
&lt;p&gt;So we now do that as a separate steps. previously we had wrapped multiple decisions into one step, which was too much.&lt;/p&gt;
&lt;p&gt;So whilst we still need, currently, to introduce the concept of titles and tenures, we do this in one place.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/search_results_after.jpg&#34; alt=&#34;&#34; title=&#34;The new search results are much clearer and align to what our users expect to see next.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-did-we-build-it&#34;&gt;How did we build it?&lt;/h2&gt;
&lt;p&gt;The Find Property Information team consists of 12 people from different disciplines, we sometimes struggled to communicate effectively and stay focused due to the sheer numbers of communication pathways between team members. We had a hunch that the size of the team was slowing down our delivery so we decided to use postcode search as a good opportunity to test it. We separated out 4 people to focus solely on delivering improved search.&lt;/p&gt;
&lt;p&gt;The team came up with a number of technical approaches and chose the one that would deliver the most value. There were other potentially better solutions, but would have taken longer to implement. Building services is always a trade off between building what’s needed now, and envisioning future use cases. There are risks to both approaches, too bare bones and it can be difficult to change the solution in future, too blue sky and time and energy can be wasted on features and functions that aren’t actually needed.&lt;/p&gt;
&lt;p&gt;On the whole we saw a lot of benefits from the small team. The small size meant that our processes could be much more lightweight, much less time was spent planning and discussing work, if a problem came up or a change needed to happen, it was much easier to solve as it was just a quick chat to discuss the problem, think of how to solve it and move on.
The team progressed well and improved our address search component, built a title-api for retrieving titles per address, and ‘plugged into’ an audit-api for collating what was happening within the service for troubleshooting and audit needs.&lt;/p&gt;
&lt;p&gt;But we reached a point where we needed to ‘plug-in’ what had been built back into the service. We needed to consider how we could deliver the functionality that had been built iteratively into the service without getting in the way, or breaking any of the other work being done by the rest of the team.&lt;/p&gt;
&lt;h2 id=&#34;agile-doesnt-equal-no-planning&#34;&gt;Agile doesn’t equal No Planning&lt;/h2&gt;
&lt;p&gt;We had a reached a point where we needed to get the team back together and consider how to move postcode into the service.&lt;/p&gt;
&lt;p&gt;We came up with a high-level plan to deploy each of the new api’s in a way that wouldn’t impact the service or cause any downtime. It was also an iterative plan so by breaking the releases down into small chunks we could de-risk the change and rollback easily if any particular part did go wrong.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/whiteboarding.jpg&#34; alt=&#34;&#34; title=&#34;Planning agile style, team members gathered around a whiteboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;We also wanted to assure ourselves that the search was as good as we thought it would be so we included: a comprehensive set of automated acceptance tests; manual eyeballing; and tests to verify our hypothesis of what we expected to happen when the changes were in production.
The hardest part of testing was finding a decent baseline to ‘prove our search was good. We knew our existing search was inconsistent so it made for a very poor baseline. We had other services that also had search functionality so we did some investigation into these services to test their viability as baselines.&lt;/p&gt;
&lt;p&gt;What we found was that whilst on the whole they were good enough as a baseline, they all had slight discrepancies or weird results mainly due to data quality either from us or from our address suppliers. The Addressbase dataset has over 28 million address points, and our register data is over 24 million titles. Both of these datasets change daily and when they are as large as that even a 1% error rate can equal hundreds of thousands of data rows.&lt;/p&gt;
&lt;p&gt;Improving the quality of these two datasets wasn’t going to be possible so instead we attempted to understand the problems a bit better so that at least if users did encounter issues we could offer them an onward journey or understand why. We produced a ‘wall of weird’ of postcodes we knew behaved strangely in existing services and added these to our test baseline to see what happened in our service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/wall_of_weird.jpg&#34; alt=&#34;&#34; title=&#34;The wall of weird, a whiteboard where we captured all the strange search behaviour we identified, so that we could validate we had fixed them as we improved the service.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-did-we-release-it&#34;&gt;How did we release it?&lt;/h2&gt;
&lt;p&gt;So we had a test and deploy plan that was detailed enough to give us direction, but lightweight enough to change when things inevitably changed or went wrong. And a few things did go wrong.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We hoped to release an updated address index into the service as a standalone iteration. However, when testing it, we found it had more of an impact on the user experience than we were comfortable with, so we had to bundle the change in with the ‘main’ release.&lt;/li&gt;
&lt;li&gt;As a result the main release became bigger than expected and we had to schedule in downtime, adding a number of additional steps and approvals.&lt;/li&gt;
&lt;li&gt;We found the title-api performed within thresholds but not as well as we would like, we found that search results had spikes of long response times. Whilst only affecting 2% of users, scaling up to actual usage volumes could equal hundreds of unsatisfied people.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That final problem was the biggest challenge we faced, we hadn’t seen it in any of our lower test environments, but then again our pre-prod environment is the one that most resembles live. At first we didn’t have a good handle on exactly how big the issue was so we created some performance scripts to allow us to monitor response times whilst under heavy load. The scripts confirmed the scale of what we were seeing, but didn’t give us any further clues as to what was causing it.&lt;/p&gt;
&lt;p&gt;Finally we decided that the benefits of the new search functionality exceeded the risks of some users having slow performance. We came up with a plan for measuring production performance and agreed to set some time aside to improve it should we see it happening in PROD.&lt;/p&gt;
&lt;p&gt;Finally we were in a position where we were ready to release. We had to turn the service off for an hour but pre-warned users of the downtime. The change itself went very smoothly and we were deployed and tested within 50 minutes.&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-know-whether-it-has-been-successful&#34;&gt;How do we know whether it has been successful?&lt;/h2&gt;
&lt;p&gt;The measure of success that was most pressing was whether PROD would see the same performance issues that we saw in the test environment. It took a few days to build a sample of traffic but sure enough we did see the same problem. By then however we had given a bit more thought as to a plan for improving the performance. After the first release the refactored code went into production, drastically improving performance times.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/before_performance.jpg&#34; alt=&#34;&#34; title=&#34;Initial performance times, good but not excellent. Most responses within 2 seconds&#34;&gt;&lt;/p&gt;
&lt;p&gt;Initial performance times, good but not excellent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/after_performance.jpg&#34; alt=&#34;&#34; title=&#34;Production responses following improvements, most responses in under 0.1 seconds!&#34;&gt;&lt;/p&gt;
&lt;p&gt;Production responses following improvements, note the change in scale!&lt;/p&gt;
&lt;p&gt;All of our hypotheses of what would happen in Production have so far played out to be true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the sample we tested our search is as good as existing HMLR services.&lt;/li&gt;
&lt;li&gt;Addresses changed in the past year now return in our search results.&lt;/li&gt;
&lt;li&gt;Our new audit-api is collecting audit data successfully.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The most important change is that search is dropping down our ‘Top issues for our users’ chart.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;Whats next?&lt;/h2&gt;
&lt;p&gt;We will continue to learn more about how search is performing in the service, shipping to Production is the only true point where you really start to learn about how people use your service and how it works at scale so I’m sure we will need to make a few changes based on feedback.&lt;/p&gt;
&lt;p&gt;We also have some work we want to do, to replace our address component with an address-api that is being built by colleagues in another team. This ‘common component’ will reduce maintenance overhead and ensure more consistency between services in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Our Digital Team Works</title>
      <link>https://ames.world/posts/how-our-digital-team-works/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ames.world/posts/how-our-digital-team-works/</guid>
      <description>&lt;p&gt;I’m the Delivery Team Lead for a small multi-disciplinary team in government. We are developing the service in an agile way following the &lt;a href=&#34;https://hmlandregistry.blog.gov.uk/2017/6/27/working-with-gds-to-develop-our-find-property-information-service/&#34;&gt;digital service standards developed by our colleagues at the Government Digital Service (GDS)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We recently added the ability to keep a copy of the title summary (basic information about a property). It’s a great example of what this way of working looks like in practice.
Because we can continually develop the service, we aim to deliver the features that deliver most value quickly, rather than waiting for the whole service to be finished. This allows us to validate that the things we are building are delivering the value we expect and make better decisions about whether to improve a feature further, or move onto something new, based on feedback.&lt;/p&gt;
&lt;p&gt;Recently we added the option to download a summary. User research and Live feedback was telling us that this was a feature user’s expected from the service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/what_users_were_saying.jpg&#34; alt=&#34;&#34; title=&#34;A direct quote from a user: &#39;My document didnt print! I dont know why I regularly use my printer. You should have a save button to save the document in such cases.&#39;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;minimum-viable-feature&#34;&gt;Minimum Viable Feature.&lt;/h2&gt;
&lt;p&gt;Research told us that users wanted to keep the summary, the question was how could we deliver that functionality as quickly and simply as possible to learn more. This is the concept of Minimal Viable Product (MVP) taken down a level to each feature. Deliver a simple feature quickly to learn more about how to expand and develop it further based on feedback. When developing software it can be really easy to slip into ‘edge cases’ or ‘scope creep’.&lt;/p&gt;
&lt;p&gt;It takes a lot of discipline to maintain focus on just the small valuable parts.
When considering ‘keeping the summary’ we discussed logging back in; seeing previous purchases; emailing the summary to users; but ultimately we went with the simplest option, generate a pdf based on the content of the summary screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/mvp.jpg&#34; alt=&#34;&#34; title=&#34;MVP — deliver small amounts of value early, you’ll learn more about what users actually want. Credit: Henrik Kniberg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;building-services-for-all&#34;&gt;Building services for all&lt;/h2&gt;
&lt;p&gt;This decision wasn’t without its challenges. PDF’s are not a popular choice in government due to their closed source, in-accessible nature. As civil servants, we need to ensure our services are usable by all members of the public so we take accessibility seriously.&lt;/p&gt;
&lt;p&gt;We discussed what we were planning to do with the Open Standards Lead for government to ensure we were meeting acceptable standards. We learnt that our pdf needed to be standalone, (i.e. didn’t depend on any 3rd party servers to generate the content) and it had to meet accessibility standards.&lt;/p&gt;
&lt;p&gt;When testing the pdf with a screen-reader we found our recent rebranding to HM Land Registry had some unexpected results. Screen-readers read HM as hmmm. Whilst amusing it’s a good example of the effort we put into ensuring our service is clear and concise for all users. We corrected the error and have informed our other content and development colleagues to check any references are appropriately abbreviated.&lt;/p&gt;
&lt;h2 id=&#34;t-shaping&#34;&gt;T-Shaping&lt;/h2&gt;
&lt;p&gt;One of the core tenets of agile working is the ‘pizza team’ i.e. if you can’t feed the team with two pizza’s it&amp;rsquo;s too big. The reason for this is all about communication and our &lt;a href=&#34;https://en.wikipedia.org/wiki/Cognitive_load&#34;&gt;cognitive capacity&lt;/a&gt;. Lines of communication between team members increases exponentially, and the more lines of communication there are, the more noise and lost messages impact the team’s ability to deliver. This has been well understood in psychology for 60 years, yet many organisations assume large complex software projects require large teams to deliver.&lt;/p&gt;
&lt;p&gt;But small teams still need to do all the roles required to deliver a successful service, that means cross-skilling, also known as T shaping.&lt;/p&gt;
&lt;p&gt;Our team has been working hard to develop this. All of our developers test each other’s work, and for the example of download, our tester Heather took the lead in the development of the feature.&lt;/p&gt;
&lt;p&gt;In order to deliver it, she developed new skills to build a Java based pdf generator. Delivery is a team sport and the whole team contributed to its success but it was a great example of the benefits of T-shaping and instilling the right mindset. Developers who think like testers deploy fewer defects and testers who think like developers can help identify where problems are in the code speeding up defect resolution.&lt;/p&gt;
&lt;h2 id=&#34;starting-continuous-delivery&#34;&gt;Starting Continuous Delivery.&lt;/h2&gt;
&lt;p&gt;Agile delivery is all about making feedback cycles between the user and the development team as small as possible. In the past, we would release every 6 weeks leading to the vicious cycle below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/releases.jpg&#34; alt=&#34;&#34; title=&#34;The big batch release conundrum. Releases go wrong, so we won’t do it often, but this results in more change being bundled into the release, increasing the likelihood of it going wrong, and the effort to test.&#34;&gt;&lt;/p&gt;
&lt;p&gt;We are now able to deploy to production at least once a sprint, and we don’t say our work is done until it is in production delivering value. When we delivered download, we deployed it at 9 o’clock in the morning with no downtime, within a minute of it being deployed we were able to see users using the feature. The sense of satisfaction to see the work you have delivered bringing value to people immediately was immeasurable.&lt;/p&gt;
&lt;h2 id=&#34;continuous-improvement&#34;&gt;Continuous Improvement.&lt;/h2&gt;
&lt;p&gt;Hopefully, that gives you a little bit of an insight into how we are starting to build, deliver, and maintain services. We have come a long way on our journey delivering in an agile way, but this isn’t the end. We are always looking at how we can continuously improve our service. Initial feedback for pdf download is positive, and therefore we have moved onto delivering the next important feature in the service, moving sign-in further back in the user journey.&lt;/p&gt;
&lt;p&gt;We don’t stand still after a feature is delivered we regularly do a ‘show and tell’ to describe how the service is performing to our product owner and we do ‘retrospective’s’ to identify where we can improve as a team, we never stop looking for ways we can improve as a team to ensure we deliver the maximum value to you our users.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Reasons Open Plan Offices Suck for Agile Teams</title>
      <link>https://ames.world/posts/5-reasons-open-plan-offices-suck-for-agile-teams/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ames.world/posts/5-reasons-open-plan-offices-suck-for-agile-teams/</guid>
      <description>&lt;p&gt;I recently gave a presentation at the inaugural &lt;a href=&#34;https://techexeter.uk/&#34;&gt;Tech Exeter&lt;/a&gt; conference called &lt;a href=&#34;https://www.slideshare.net/IanAmes/practical-agile-tech-exeter-v2&#34;&gt;Practical agile: Lessons learned the hard way on our journey delivering digital products.&lt;/a&gt; In that presentation I claimed open plan offices are terrible team spaces, but didn&amp;rsquo;t really elaborate on why. Since then &lt;a href=&#34;https://twitter.com/_NeilParker&#34;&gt;Neil Parker&lt;/a&gt; asked on twitter to explain why I thought open plan offices are bad team environments. So here is my totally unscientific personal listicle to explain why!&lt;/p&gt;
&lt;h2 id=&#34;1-agile-teams-are-really-noisy&#34;&gt;1. Agile teams are really noisy!&lt;/h2&gt;
&lt;p&gt;And thats ok, within the team. After all a user story is a placeholder for a conversation, and lots of conversations take place to describe a design, solve a problem or get feedback on the latest user research. After all:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But put lots of agile teams together in an open plan office and the noise levels can become unbearable, each team has a need to communicate, but noise volumes grow exponentially the more conversations are happening:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Team A are having a conversation.&lt;/li&gt;
&lt;li&gt;Team B start a conversation and talk a bit louder to be heard over Team A.&lt;/li&gt;
&lt;li&gt;Team A then increase their volume so they can be heard over Team B.&lt;/li&gt;
&lt;li&gt;And so on ad-infinitum.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are trying to concentrate on a given problem or focus on coding this can quickly become unbearable. This is why you see so many developers in open plan offices wear headphones which ironically stifles conversations from taking place in teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/headphones.jpg&#34; alt=&#34;&#34; title=&#34;Lots of developers in an open plan office wearing headphones: Picture from http://www.mattblodgett.com/2015/06/just-wear-headphones.html&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-agile-teams-like-to-do-show-and-tells-in-their-team-space&#34;&gt;2. Agile teams like to do show and tells in their team space.&lt;/h2&gt;
&lt;p&gt;Where better to demo the work you have done in the last sprint than in the team space, there is a wealth of useful information in agile team areas and stakeholders get a much richer experience being able to see the sorts of things the team are working on up on the walls. The team are in a space they are comfortable in, and have materials easily to hand to answer questions or elaborate more.&lt;/p&gt;
&lt;p&gt;But in an open plan office your show and tell can easily get disrupted by people walking past the team space having a conversation, or the team across from them discussing their work.&lt;/p&gt;
&lt;p&gt;The process of show and tell is of course disruptive to others in shared spaces too. Some teams choose to book a meeting room but I feel that the richness of the ceremony is lost as a result. I believe stakeholders subconsciously absorb the information around them in team spaces and gain a greater understanding of the product being developed when surrounded by team walls.&lt;/p&gt;
&lt;h2 id=&#34;3-wall-space-is-the-prime-measure-of-currency-in-agile-teams&#34;&gt;3. Wall space is the prime measure of currency in agile teams.&lt;/h2&gt;
&lt;p&gt;Agile teams love wall space, for drawing ideas, demonstrating research, or really important team metrics:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/no_cake.jpg&#34; alt=&#34;&#34; title=&#34;Important metric showing how many days since cake was last available in the team.&#34;&gt;&lt;/p&gt;
&lt;p&gt;In open plan offices wall space is like hens teeth, instead we end up using puny whiteboards that are never quite big enough or look untidy and cluttered dotted in between desks or jutting out into floor space.&lt;/p&gt;
&lt;h2 id=&#34;4-agile-teams-like-to-feel-safe&#34;&gt;4. Agile teams like to feel safe.&lt;/h2&gt;
&lt;p&gt;When you are communicating about everything verbally it can feel quite exposed discussing problems or issues in an open plan office. Team’s need to feel safe in their space to be able to raise concerns without fear of others judging what is going wrong in their project. Open plan offices don’t allow a team to feel like they can raise a concern without being overheard by others, reducing the effectiveness of identifying problems before they become issues.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/spotify_space.jpg&#34; alt=&#34;&#34; title=&#34;Spotify team space, a good balance of team space and openness.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-agile-teams-have-fun&#34;&gt;5. Agile teams have fun.&lt;/h2&gt;
&lt;p&gt;That’s part of being a team, building a camaraderie, a clique. If you are in an open plan office, and you&amp;rsquo;re talking, and occasionally laughing and having fun. If you have a pointy haired boss this can be perceived as not being productive, not focusing on the work, shirking on the job. If other teams dont get to work they way you do, this can lead to resentment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/dilbert_open_plan.jpg&#34; alt=&#34;&#34; title=&#34;Pointy haired bosses evil open plan office&#34;&gt;&lt;/p&gt;
&lt;p&gt;Even if you dont have an evil pointy haired boss, team members can feel more exposed and more nervous about being themselves at work for fear of what their peers may think. If people aren&amp;rsquo;t comfortable in their work environment, their happiness and productivity drops.&lt;/p&gt;
&lt;p&gt;Anyway I hope that explains why I think open plan offices are terrible collaboration and working spaces, let me know what you think.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Are Sprints Sustainable</title>
      <link>https://ames.world/posts/are-sprints-sustainable/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ames.world/posts/are-sprints-sustainable/</guid>
      <description>&lt;p&gt;I’m the scrum master for a small team developing a new service for a government agency. The team has been working in an agile way for 21 months. I have been with them for 16 of those months.&lt;/p&gt;
&lt;p&gt;Over the last few months I have been feeling more and more anxious about the sustainability of sprints as we enter a new phase for our service.&lt;/p&gt;
&lt;p&gt;We use Scrum as our methodology for delivering software. Scrum at its simplest level defines a way of working to deliver small incremental changes at frequent intervals.
These intervals are called sprints, and the team makes a commitment to deliver a certain amount of work based on how much they have delivered in the past. This commitment is then tracked during the sprint and progress good or bad is reported at the end of the sprint to stakeholders in a ‘show and tell’&lt;/p&gt;
&lt;p&gt;Scrum can work, I have seen it work for other teams in our organisation but my team has struggled to get to a point where we can consistently make a commitment that we know we can meet.
As a result, show and tells become extremely demoralising, and our velocity on a sprint by sprint basis looks terrible. Worse still the focus on delivering stories on time has meant we have cut corners in places and our quality has dropped away from where we would like it to be.&lt;/p&gt;
&lt;p&gt;Additionally we are entering the ‘beta’ phase of our project. We will be responsible for live support as well as delivering features. Live support by its nature is difficult to plan, you need to be able to respond to unanticipated customer requests, or degradations in your service quickly. Scrum says that if a commitment needs to be changed during a sprint, you should kill the sprint and re-plan.
Stopping and restarting sprints regularly does not feel practical or particularly sustainable. Similarly setting aside a portion of the sprint ‘just in case’ is wasteful.&lt;/p&gt;
&lt;h2 id=&#34;so-how-did-we-get-here&#34;&gt;So how did we get here?&lt;/h2&gt;
&lt;p&gt;For the last year we have been in the difficult (although not uncommon) predicament of having a fixed scope and a fixed timescale. As any project manager will tell you if you fix scope and time, quality will drop:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/iron-triangle.gif&#34; alt=&#34;&#34; title=&#34;The time, cost, scope, constraint. Changing any of these can affect quality&#34;&gt;&lt;/p&gt;
&lt;p&gt;This certainly reflects our experience. Our quality has suffered as we struggle to meet delivering a large re-usable payment and account creation function in time for assessment and KPI deadlines.&lt;/p&gt;
&lt;p&gt;But could we have done something different?&lt;/p&gt;
&lt;p&gt;Scrum and especially point estimation encourages you to commit to work you know you can deliver (no bad thing) but when you are delivering new products using new technologies and new languages, estimation has a tendency to obey Hofstadter’s law:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It always takes longer than you expect, even when you take into account Hofstadter’s Law.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The outcome therefore tends to be that sprint commitments reduce in size, and therefore deadlines are put at risk.&lt;/p&gt;
&lt;p&gt;The team then feels responsible to try to deliver more to meet the deadline, despite the evidence and over commit. Morale then drops when that over commitment isn’t met.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;agile manifesto&lt;/a&gt; itself states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scrum in the scenario we find ourselves in feels a long way from sustainable. In fact Ron Jeffries, one of the signatories of the agile manifesto has found this to be the case elsewhere and has coined the term &lt;a href=&#34;https://ronjeffries.com/articles/016-09ff/defense/&#34;&gt;Dark-Scrum&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-if-there-could-be-a-different-way-of-approaching-this&#34;&gt;What if there could be a different way of approaching this?&lt;/h2&gt;
&lt;p&gt;Reflecting on the time/cost/scope triangle it becomes apparent Scrum attempts to reduce scope to what is achievable.&lt;/p&gt;
&lt;p&gt;However the only true constraint is time. You always have the option to change scope, cost or quality you cannot add time.&lt;/p&gt;
&lt;p&gt;It makes sense therefore to focus commitment on improving the time it takes to move a thing from Backlog to Done as quickly as possible rather than fixing scope.&lt;/p&gt;
&lt;h2 id=&#34;enter-kanban&#34;&gt;Enter Kanban.&lt;/h2&gt;
&lt;p&gt;Kanban is often used within scrum, you regularly see backlog/doing/done boards in scrum teams. However you don’t always see all kanban principles being applied to these boards. These are:&lt;/p&gt;
&lt;h3 id=&#34;limit-work-in-progress-wip-to-protect-constraints&#34;&gt;Limit Work in Progress (WIP) to protect constraints.&lt;/h3&gt;
&lt;p&gt;The number one rule of kanban is that in order to get things from backlog to done, you need to prevent blockages in the workflow. The best way to prevent blockages is to identify the constraints in your flow and limit the amount of work in progress to however much the slowest part can handle. By doing this it is much more visible to the team where constraints are.&lt;/p&gt;
&lt;p&gt;If part of your workflow is blocked, and no other stories can therefore progress, then its extremely apparent that the issue needs resolving. Problems are identified much more quickly by this fact.&lt;/p&gt;
&lt;p&gt;In my experience dev teams are much more enthusiastic looking for ways to improve speed of delivery than they are improving their estimation techniques.&lt;/p&gt;
&lt;h3 id=&#34;pull-not-push&#34;&gt;Pull not push.&lt;/h3&gt;
&lt;p&gt;In order to protect a constraint you want to manage the flow. If you are pushing work, you very quickly build up a pile of work in front of the constraint, making merging and testing more difficult. By pulling branches into the environments; which have WIP limits; you prevent stockpiling of features and your workflow ‘jamming up’. This will be familiar to anyone using git.&lt;/p&gt;
&lt;h3 id=&#34;measure-cycle-time&#34;&gt;Measure cycle time.&lt;/h3&gt;
&lt;p&gt;Cycle time is the time it takes for a ‘backlog item’ to get from backlog to done; and by done I mean production! I have seen many definitions of done that define ‘done’ as being signed off by a Product Owner in a test environment. For me this goes against agile principle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Working software is the primary measure of progress.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Surely the final acceptance of ‘working’ is that users are using it and are happy rather than tests have passed successfully?&lt;/p&gt;
&lt;p&gt;Similarly measuring cycle time and trying to speed it up comes up with tangible realistic improvements that can be implemented rather than scope reduction and managing expectations.&lt;/p&gt;
&lt;h3 id=&#34;make-process-policies-explicit&#34;&gt;Make process policies explicit.&lt;/h3&gt;
&lt;p&gt;This is the quality gate that scrum doesn’t define as well in my opinion. Scrum has a definition of done, but kanban says to define an acceptable level for each part of the workflow not just done. This allows you to cook in the right level and type of testing to the appropriate part of the workflow and it means that stories can’t drift all the way to done without having been through some quality gates. The risk of only defining a definition of done is that the temptation can then be to ship it anyway regardless of the DoD criteria not being met, making the definition pointless.&lt;/p&gt;
&lt;h3 id=&#34;what-about-forecasting-how-long-the-backlog-will-take-to-deliver&#34;&gt;What about forecasting how long the backlog will take to deliver?&lt;/h3&gt;
&lt;p&gt;This is something I have struggled with as a concept in scrum, most teams estimate in points, but then we are expected to forecast delivery in time.&lt;/p&gt;
&lt;p&gt;I have often seen this turn into ‘1 point = 1 day’ conversations as a result.&lt;/p&gt;
&lt;p&gt;Most product backlogs fall into a standard distribution bell curve. There will be some complex large stories to deliver, there will be some tiny small stories, but most stuff will fall within 1 standard deviation of the average.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/bell-curve.jpeg&#34; alt=&#34;&#34; title=&#34;a statistical bell curve&#34;&gt;&lt;/p&gt;
&lt;p&gt;That being the case, if we know our average speed to deliver a story, and we know how many items are on the backlog we can easily project how long a project will take to complete without the need for points based estimation.&lt;/p&gt;
&lt;p&gt;Additionally if we want to produce ranges we can use the standard deviations to project good and bad cases early on in the product.&lt;/p&gt;
&lt;h4 id=&#34;what-about-quality&#34;&gt;What about quality?&lt;/h4&gt;
&lt;p&gt;So how does kanban improve quality? Well we set quality constraints on the flow too. In order to proceed to the next step you must have proven x, y, z. This obviously affects cycle time but then the focus for the devs becomes how do we prove our quality targets in the most efficient way possible? Again we wont be tempted to skip quality to meet a sprint commitment because the commitment is on our delivery speed which has a much clearer inverse relationship to quality.&lt;/p&gt;
&lt;h4 id=&#34;what-about-standups-and-show-and-tells&#34;&gt;What about standups and show and tells?&lt;/h4&gt;
&lt;p&gt;We still standup every day and talk about what we did yesterday, what we are doing today, what is getting in the way. The key difference is that WIP limits make the ‘what is getting in the way’ question much clearer, its easier for everyone to identify and see blockers and take action accordingly.&lt;/p&gt;
&lt;h2 id=&#34;how-does-this-relate-to-sustainability-of-sprints&#34;&gt;How does this relate to sustainability of sprints?&lt;/h2&gt;
&lt;p&gt;Sprints can and do work for some teams but if you find that it isn’t working for your team then kanban is worth a look.&lt;/p&gt;
&lt;p&gt;Previous scrum planning meetings had been focused on how we could reduce our commitment and still meet our time and scope deadlines (which rarely produced any fruitful ideas and generally led to anxiety and uncertainty). The majority of the team started to hate planning so much that there was an in-joke that everything was a 5 pointer.&lt;/p&gt;
&lt;p&gt;When we talked about moving to kanban the meeting was electric, the team immediately started talking about how we could improve our workflow? What would we do if we hit our constraint limit in different environments? How could we improve the automation of our tests and deploys? But most importantly how could we tidy up our code as we go to ensure we pass our quality gates.&lt;/p&gt;
&lt;p&gt;Its early days on our kanban journey and of course when you start something new there is initial enthusiasm however I am confident that kanban is a much better focus on the correct constraint (time) and offers a level of flexibility that sprints and points based estimation did not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>User Research Is the Most Frustrating Thing Ever</title>
      <link>https://ames.world/posts/user-research-is-the-most-frustrating-thing-ever/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ames.world/posts/user-research-is-the-most-frustrating-thing-ever/</guid>
      <description>&lt;p&gt;I’m the scrum master for a small team developing a new service for a government agency. The team has been working in an agile way for 20 months. I have been with them for 15 of those months.&lt;/p&gt;
&lt;p&gt;Our team is made up of user researchers, a designer, a BA, developers and testers.&lt;/p&gt;
&lt;p&gt;Dealing with users isn’t new to me, before joining my current team I worked in IT operations and service management, dealing with angry and frustrated users was a day to day part of the role.&lt;/p&gt;
&lt;p&gt;However I have found user research to be one of the most frustrating parts of my current role.
When a new feature is being misused, panned or worst of all ignored I can see the frustration on the devs and testers faces.&lt;/p&gt;
&lt;p&gt;They have put effort and care into nurturing this feature into existence and making sure it passes all tests and doesn’t make anything blow up. You can see them willing and hoping or worse praying that a user behaves in the way we expected them to.&lt;/p&gt;
&lt;p&gt;Users never do.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;How it feels to watch a user test your product for the first time. &lt;a href=&#34;https://t.co/WqYqYoxmfq&#34;&gt;pic.twitter.com/WqYqYoxmfq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Farbod Saraf (@farbodsaraf) &lt;a href=&#34;https://twitter.com/farbodsaraf/status/762858067218149376?ref_src=twsrc%5Etfw&#34;&gt;August 9, 2016&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;but-you-should-do-it-anyway&#34;&gt;…but you should do it anyway.&lt;/h2&gt;
&lt;p&gt;If being a product owner is about delivering the best product you can, being a scrum master is about developing the best team you can.&lt;/p&gt;
&lt;p&gt;A bad user research session can be terrible for morale and badly handled can lead to friction in the team.&lt;/p&gt;
&lt;p&gt;But you should still do it.&lt;/p&gt;
&lt;p&gt;User research takes a bit of getting used to, especially if you come from a requirements driven waterfall background but it has saved our service many times.&lt;/p&gt;
&lt;p&gt;The first time I became aware of it’s power was when the team were building a payment platform.&lt;/p&gt;
&lt;p&gt;We were using a shared platform with other services and were concerned about how the change of style would affect peoples perception.&lt;/p&gt;
&lt;p&gt;We started worrying about how we would reconcile branding our service versus having to regression test all our current services if we did change the style.&lt;/p&gt;
&lt;p&gt;We gritted our teeth and tested the service with the current payment platform with no style changes. We expected to get destroyed we thought they style jump looked crap, we worried that users would not trust the service, we thought it looked terrible and jarring.&lt;/p&gt;
&lt;p&gt;Users didn’t bat an eyelid.&lt;/p&gt;
&lt;p&gt;Most responded with comments such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘Oh this uses worldpay I know that.’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We totally misjudged reactions and as a result we saved a ton of work restyling and regression testing our payment platform.&lt;/p&gt;
&lt;h2 id=&#34;user-research-is-a-team-sport&#34;&gt;User Research is a team sport.&lt;/h2&gt;
&lt;p&gt;So user research makes you want run into the room screaming JUST CLICK THE BUTTON RIGHT THERE!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/picard-click-the-button.jpeg&#34; alt=&#34;&#34; title=&#34;Jean Luc Picard saying just click the damn button&#34;&gt;&lt;/p&gt;
&lt;p&gt;But expose the team to it anyway, it teaches humility, it teaches us to question why we are building the things we are building, and it teaches us to think ‘what would I do in a user shoes.’&lt;/p&gt;
&lt;p&gt;So how do you do effective research without the team breaking down in tears every lab session:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stay respectful, User researchers are just the messengers, devs are just doing the best they can with what they know at the time. Stay respectful when things go wrong.&lt;/li&gt;
&lt;li&gt;Take the dev team to labs as often as possible or if not get a live feed going.&lt;/li&gt;
&lt;li&gt;Get video feedback to the team as quickly as possible. UR feedback is important but there is nothing better for investigating strange bugs or behaviours than seeing it happen (make sure a clock is visible in the video to compare events to log files).&lt;/li&gt;
&lt;li&gt;Make the time to feedback research findings and modify the backlog as a result.&lt;/li&gt;
&lt;li&gt;If possible test features in live, it is better to deploy a feature that can be improved than not to deploy and test in a less realistic environment. You can also reinforce UR findings with wider analytics evidence.&lt;/li&gt;
&lt;li&gt;If you are a product owner take your stakeholders to user research, let them see the consequences of decisions, how well or badly a user responds to what can feel like a good idea in a boardroom or stakeholder workshop.&lt;/li&gt;
&lt;li&gt;Keep testing the full service, you may want to focus on a particular feature but you always get feedback about existing features and how they all work together, does the whole flow still make sense?&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>The evolving visualisation of workflow in our team.</title>
      <link>https://ames.world/posts/the-evolving-visualisation-of-workflow-in-our-team/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ames.world/posts/the-evolving-visualisation-of-workflow-in-our-team/</guid>
      <description>&lt;p&gt;I’m the scrum master for a small team developing a new service for a government agency. The team has been working in an agile way for 17 months. I have been with them for 12 of those months.&lt;/p&gt;
&lt;p&gt;One of the main parts of my role is to help the team visualise the flow of work from idea to delivered. If we can see where work is (and how long it is there), we can see where it is getting blocked and I can go to work with my big unblocking hammer. This article describes the evolution of our workflow board over the past year, the problems we have identified with different approaches and the things we have tried to resolve them.&lt;/p&gt;
&lt;h2 id=&#34;the-team&#34;&gt;The team&lt;/h2&gt;
&lt;p&gt;We are a multi-disciplinary team. Currently we have two user researchers, a designer, a tech architect, a business analyst, five developers, and two testers. Of course it isn’t as simple as that our developers have specialisms and the line between tester and developer is becoming more blurred with the use of test automation. To me this blurring of roles is a good thing, a team can handle blockages in backlogs more effectively if they have some knowledge of the whole process of delivery. We have also had a fair bit of churn in the team, but that’s an article for another day.&lt;br&gt;
Additionally the team has a product owner, we very much treat him as part of the team, and he is very good at considering what the team thinks needs to happen to develop the service, but ultimately he calls the shots.&lt;/p&gt;
&lt;p&gt;We are supported by the webops team who build our underlying server infrastructure. We aren’t totally DevOps yet but we are working on it.&lt;br&gt;
Finally there’s me, my role is to facilitate and guide the team toward meeting their commitments. We use scrum and we operate on two week sprints commitments. A key part of my role is helping the team see where they are in delivering the commitment.&lt;/p&gt;
&lt;h2 id=&#34;the-flow&#34;&gt;The flow&lt;/h2&gt;
&lt;p&gt;As anyone who has ever been stuck behind a tractor will know, you can only go as fast as the slowest thing. That’s why visualising the flow of work from backlog to done is so important. You want to identify where your constraints in delivery are and either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Limit the workflow to protect the constraint (you cant deliver more than the slowest part so don’t swamp it and make it slower).&lt;/li&gt;
&lt;li&gt;Remove the constraint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A kanban board is a well established way to show flow ours has evolved as we have over the last year.&lt;/p&gt;
&lt;h2 id=&#34;board-1-the-tick-box-board&#34;&gt;Board 1. The tick box board.&lt;/h2&gt;
&lt;p&gt;This board was established when joined the team, personally I didn’t take to it as using ticks to represent where the story is didn’t make blockers stand out to me. It also did nothing to help the team think about limiting their work in progress. Stories further down the list were regularly being started before stories higher up were Done.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/kanban1.jpeg&#34; alt=&#34;&#34; title=&#34;tickbox board, a grid with stories on the y axis and steps to be done on the x. When each task is completed for a given story, the box is ticked&#34;&gt;&lt;/p&gt;
&lt;p&gt;Its not my place to tell a team how to work, its my job to coach and mentor and point out why changes to work methods may be worth trying. The team agreed to try a new board after a particularly difficult sprint.&lt;/p&gt;
&lt;h2 id=&#34;board-2-the-basic-kanban-board&#34;&gt;Board 2. The basic kanban board.&lt;/h2&gt;
&lt;p&gt;Next we tried a fairly basic kanban board with the intention of inspecting and adapting it as we identified our constraints.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/kanban2.jpeg&#34; alt=&#34;&#34; title=&#34;basic kanban board with 4 columns, backlog, wip - work in progress, review and done&#34;&gt;&lt;/p&gt;
&lt;p&gt;The basic kanban board had a few issues. It was easy to lose track of priority as cards moved from one column to the other. It also wasn’t always obvious when a card should move from one column to the next.&lt;/p&gt;
&lt;p&gt;Crucially our team are co-located, the majority of the team are in one place but not everyone. We used pivotal tracker as the source of truth of what was going on with a story. The success of the physical board and its ease of use led to its own problem, the board was updated but often we were forgetting to update pivotal, leading to confusion.&lt;/p&gt;
&lt;h2 id=&#34;board-3-detailed-backlog-board&#34;&gt;Board 3. Detailed backlog board.&lt;/h2&gt;
&lt;p&gt;Horizontal lines were re-introduced to help keep better track of priority. Checklists above each column were also added to assist with decision making on whether the card was ready to be moved on in the flow. The board expanded physically too, a new mini board was added to the left where cards coming up for the next sprint were added to give a better heads up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/kanban3.jpeg&#34; alt=&#34;&#34; title=&#34;detailed kanban board with 5 columns, backlog, wip - work in progress, code review, review and done. To the left of the main board is a seperate column showing what is coming in the following sprint.&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://ames.world/images/kanban3a.jpeg&#34; alt=&#34;&#34; title=&#34;Board 3 included a clearer sprint goal to help the team judge whether they had met the overall aim of the sprint.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/kanban3b.jpeg&#34; alt=&#34;&#34; title=&#34;Board 3 also included checklists to help decision making and stimulate conversation before moving cards on.&#34;&gt;&lt;br&gt;
Board 3 helped with the priority issues. The re-addition of horizontal priority lines did lead to some concern that we were going back to the checklist board, however once the team saw cards continued to flow as with the simpler kanban board that was cleared up.&lt;/p&gt;
&lt;p&gt;Board 3 helped provide more clarity but the problem with pivotal falling behind remained.&lt;br&gt;
One crucial problem that all the boards had was that they focused on technical delivery and didn’t include user research and design. This sometimes led to confusion leading to differences between prototypes and production systems.&lt;/p&gt;
&lt;p&gt;Similarly our delivery through to production is not yet continuous. We were signing stories off in our preview environment and then not tracking the work to get the story to production. The work was being done but it was hidden from our estimation for future sprints.&lt;/p&gt;
&lt;h2 id=&#34;board-4-mapping-the-whole-flow-is-one-board-enough&#34;&gt;Board 4. Mapping the whole flow, is one board enough?&lt;/h2&gt;
&lt;p&gt;In order to further improve the board, I decided to whiteboard the end to end process of idea to production. I realised that if we wanted to we could split the flow into different boards.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A board for user research and prototyping&lt;/li&gt;
&lt;li&gt;A standard sprint delivery board.&lt;/li&gt;
&lt;li&gt;A board to track production releases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/flowmap.jpeg&#34; alt=&#34;&#34; title=&#34;Whiteboarded flow map of all the steps from idea to production.&#34;&gt;&lt;br&gt;
The flow diagram wasn&amp;rsquo;t met with universal appeal. There were concerns that it was silo’ing the team, it looked to waterfall’y. But it did stimulate a lot of debate about how we deliver things and our relationship between UR/Prototyping, Delivery and Release.&lt;/p&gt;
&lt;p&gt;Eventually we settled on two boards. A UR/Design board aimed to be a few weeks ahead of the Delivery/Release board in any given sprint. We wanted to solve the pivotal/physical board issue so we switched to trello which gave the closest physical approximation of the flexibility of a physical board in my humble opinion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ames.world/images/trellour.png&#34; alt=&#34;&#34; title=&#34;Trello user research board.&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://ames.world/images/trellodev.png&#34; alt=&#34;&#34; title=&#34;Trello delivery board&#34;&gt;&lt;br&gt;
We have only been using the boards for one sprint so far, generally they have been well received but it’s early days. There have been a few issues migrating and refining stories in the move from pivotal to trello (not as easy as you might think, I recommend this tool from little blue monkey) and I’m sure some of the columns may change especially in the UR board which we haven’t really defined in this way before.&lt;/p&gt;
&lt;p&gt;There are a few negatives to this board:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have the priority losing issue we had with board 2 back again. We have worked around it by creating a card with a list of the priorities in it for reference if anyone gets uncertain.&lt;/li&gt;
&lt;li&gt;Ideally we want to kill the release part of the flow, this needs to be automated as much as possible a-la Continuous Integration/Continuous Delivery. The fact that visualising the flow in this way helped us to identify and start to address this issue is a positive.&lt;/li&gt;
&lt;li&gt;I have a nagging feeling about the loss of the tangibility of a physical card, I cant put my figure on what it is but there is something tactile about owning something physical.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would be interested in your views and experiences of visualising workflow, what has worked well what hasn&amp;rsquo;t. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
