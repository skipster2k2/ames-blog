<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kanban on Ames World</title>
    <link>https://www.ames.world/tags/kanban/</link>
    <description>Recent content in kanban on Ames World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Thu, 15 Sep 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.ames.world/tags/kanban/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Are Sprints Sustainable</title>
      <link>https://www.ames.world/posts/are-sprints-sustainable/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.ames.world/posts/are-sprints-sustainable/</guid>
      <description>&lt;p&gt;I’m the scrum master for a small team developing a new service for a government agency. The team has been working in an agile way for 21 months. I have been with them for 16 of those months.&lt;/p&gt;
&lt;p&gt;Over the last few months I have been feeling more and more anxious about the sustainability of sprints as we enter a new phase for our service.&lt;/p&gt;
&lt;p&gt;We use Scrum as our methodology for delivering software. Scrum at its simplest level defines a way of working to deliver small incremental changes at frequent intervals.
These intervals are called sprints, and the team makes a commitment to deliver a certain amount of work based on how much they have delivered in the past. This commitment is then tracked during the sprint and progress good or bad is reported at the end of the sprint to stakeholders in a ‘show and tell’&lt;/p&gt;
&lt;p&gt;Scrum can work, I have seen it work for other teams in our organisation but my team has struggled to get to a point where we can consistently make a commitment that we know we can meet.
As a result, show and tells become extremely demoralising, and our velocity on a sprint by sprint basis looks terrible. Worse still the focus on delivering stories on time has meant we have cut corners in places and our quality has dropped away from where we would like it to be.&lt;/p&gt;
&lt;p&gt;Additionally we are entering the ‘beta’ phase of our project. We will be responsible for live support as well as delivering features. Live support by its nature is difficult to plan, you need to be able to respond to unanticipated customer requests, or degradations in your service quickly. Scrum says that if a commitment needs to be changed during a sprint, you should kill the sprint and re-plan.
Stopping and restarting sprints regularly does not feel practical or particularly sustainable. Similarly setting aside a portion of the sprint ‘just in case’ is wasteful.&lt;/p&gt;
&lt;h2 id=&#34;so-how-did-we-get-here&#34;&gt;So how did we get here?&lt;/h2&gt;
&lt;p&gt;For the last year we have been in the difficult (although not uncommon) predicament of having a fixed scope and a fixed timescale. As any project manager will tell you if you fix scope and time, quality will drop:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/iron-triangle.gif&#34; alt=&#34;&#34; title=&#34;The time, cost, scope, constraint. Changing any of these can affect quality&#34;&gt;&lt;/p&gt;
&lt;p&gt;This certainly reflects our experience. Our quality has suffered as we struggle to meet delivering a large re-usable payment and account creation function in time for assessment and KPI deadlines.&lt;/p&gt;
&lt;p&gt;But could we have done something different?&lt;/p&gt;
&lt;p&gt;Scrum and especially point estimation encourages you to commit to work you know you can deliver (no bad thing) but when you are delivering new products using new technologies and new languages, estimation has a tendency to obey Hofstadter’s law:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It always takes longer than you expect, even when you take into account Hofstadter’s Law.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The outcome therefore tends to be that sprint commitments reduce in size, and therefore deadlines are put at risk.&lt;/p&gt;
&lt;p&gt;The team then feels responsible to try to deliver more to meet the deadline, despite the evidence and over commit. Morale then drops when that over commitment isn’t met.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;agile manifesto&lt;/a&gt; itself states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scrum in the scenario we find ourselves in feels a long way from sustainable. In fact Ron Jeffries, one of the signatories of the agile manifesto has found this to be the case elsewhere and has coined the term &lt;a href=&#34;https://ronjeffries.com/articles/016-09ff/defense/&#34;&gt;Dark-Scrum&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-if-there-could-be-a-different-way-of-approaching-this&#34;&gt;What if there could be a different way of approaching this?&lt;/h2&gt;
&lt;p&gt;Reflecting on the time/cost/scope triangle it becomes apparent Scrum attempts to reduce scope to what is achievable.&lt;/p&gt;
&lt;p&gt;However the only true constraint is time. You always have the option to change scope, cost or quality you cannot add time.&lt;/p&gt;
&lt;p&gt;It makes sense therefore to focus commitment on improving the time it takes to move a thing from Backlog to Done as quickly as possible rather than fixing scope.&lt;/p&gt;
&lt;h2 id=&#34;enter-kanban&#34;&gt;Enter Kanban.&lt;/h2&gt;
&lt;p&gt;Kanban is often used within scrum, you regularly see backlog/doing/done boards in scrum teams. However you don’t always see all kanban principles being applied to these boards. These are:&lt;/p&gt;
&lt;h3 id=&#34;limit-work-in-progress-wip-to-protect-constraints&#34;&gt;Limit Work in Progress (WIP) to protect constraints.&lt;/h3&gt;
&lt;p&gt;The number one rule of kanban is that in order to get things from backlog to done, you need to prevent blockages in the workflow. The best way to prevent blockages is to identify the constraints in your flow and limit the amount of work in progress to however much the slowest part can handle. By doing this it is much more visible to the team where constraints are.&lt;/p&gt;
&lt;p&gt;If part of your workflow is blocked, and no other stories can therefore progress, then its extremely apparent that the issue needs resolving. Problems are identified much more quickly by this fact.&lt;/p&gt;
&lt;p&gt;In my experience dev teams are much more enthusiastic looking for ways to improve speed of delivery than they are improving their estimation techniques.&lt;/p&gt;
&lt;h3 id=&#34;pull-not-push&#34;&gt;Pull not push.&lt;/h3&gt;
&lt;p&gt;In order to protect a constraint you want to manage the flow. If you are pushing work, you very quickly build up a pile of work in front of the constraint, making merging and testing more difficult. By pulling branches into the environments; which have WIP limits; you prevent stockpiling of features and your workflow ‘jamming up’. This will be familiar to anyone using git.&lt;/p&gt;
&lt;h3 id=&#34;measure-cycle-time&#34;&gt;Measure cycle time.&lt;/h3&gt;
&lt;p&gt;Cycle time is the time it takes for a ‘backlog item’ to get from backlog to done; and by done I mean production! I have seen many definitions of done that define ‘done’ as being signed off by a Product Owner in a test environment. For me this goes against agile principle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Working software is the primary measure of progress.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Surely the final acceptance of ‘working’ is that users are using it and are happy rather than tests have passed successfully?&lt;/p&gt;
&lt;p&gt;Similarly measuring cycle time and trying to speed it up comes up with tangible realistic improvements that can be implemented rather than scope reduction and managing expectations.&lt;/p&gt;
&lt;h3 id=&#34;make-process-policies-explicit&#34;&gt;Make process policies explicit.&lt;/h3&gt;
&lt;p&gt;This is the quality gate that scrum doesn’t define as well in my opinion. Scrum has a definition of done, but kanban says to define an acceptable level for each part of the workflow not just done. This allows you to cook in the right level and type of testing to the appropriate part of the workflow and it means that stories can’t drift all the way to done without having been through some quality gates. The risk of only defining a definition of done is that the temptation can then be to ship it anyway regardless of the DoD criteria not being met, making the definition pointless.&lt;/p&gt;
&lt;h3 id=&#34;what-about-forecasting-how-long-the-backlog-will-take-to-deliver&#34;&gt;What about forecasting how long the backlog will take to deliver?&lt;/h3&gt;
&lt;p&gt;This is something I have struggled with as a concept in scrum, most teams estimate in points, but then we are expected to forecast delivery in time.&lt;/p&gt;
&lt;p&gt;I have often seen this turn into ‘1 point = 1 day’ conversations as a result.&lt;/p&gt;
&lt;p&gt;Most product backlogs fall into a standard distribution bell curve. There will be some complex large stories to deliver, there will be some tiny small stories, but most stuff will fall within 1 standard deviation of the average.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/bell-curve.jpeg&#34; alt=&#34;&#34; title=&#34;a statistical bell curve&#34;&gt;&lt;/p&gt;
&lt;p&gt;That being the case, if we know our average speed to deliver a story, and we know how many items are on the backlog we can easily project how long a project will take to complete without the need for points based estimation.&lt;/p&gt;
&lt;p&gt;Additionally if we want to produce ranges we can use the standard deviations to project good and bad cases early on in the product.&lt;/p&gt;
&lt;h4 id=&#34;what-about-quality&#34;&gt;What about quality?&lt;/h4&gt;
&lt;p&gt;So how does kanban improve quality? Well we set quality constraints on the flow too. In order to proceed to the next step you must have proven x, y, z. This obviously affects cycle time but then the focus for the devs becomes how do we prove our quality targets in the most efficient way possible? Again we wont be tempted to skip quality to meet a sprint commitment because the commitment is on our delivery speed which has a much clearer inverse relationship to quality.&lt;/p&gt;
&lt;h4 id=&#34;what-about-standups-and-show-and-tells&#34;&gt;What about standups and show and tells?&lt;/h4&gt;
&lt;p&gt;We still standup every day and talk about what we did yesterday, what we are doing today, what is getting in the way. The key difference is that WIP limits make the ‘what is getting in the way’ question much clearer, its easier for everyone to identify and see blockers and take action accordingly.&lt;/p&gt;
&lt;h2 id=&#34;how-does-this-relate-to-sustainability-of-sprints&#34;&gt;How does this relate to sustainability of sprints?&lt;/h2&gt;
&lt;p&gt;Sprints can and do work for some teams but if you find that it isn’t working for your team then kanban is worth a look.&lt;/p&gt;
&lt;p&gt;Previous scrum planning meetings had been focused on how we could reduce our commitment and still meet our time and scope deadlines (which rarely produced any fruitful ideas and generally led to anxiety and uncertainty). The majority of the team started to hate planning so much that there was an in-joke that everything was a 5 pointer.&lt;/p&gt;
&lt;p&gt;When we talked about moving to kanban the meeting was electric, the team immediately started talking about how we could improve our workflow? What would we do if we hit our constraint limit in different environments? How could we improve the automation of our tests and deploys? But most importantly how could we tidy up our code as we go to ensure we pass our quality gates.&lt;/p&gt;
&lt;p&gt;Its early days on our kanban journey and of course when you start something new there is initial enthusiasm however I am confident that kanban is a much better focus on the correct constraint (time) and offers a level of flexibility that sprints and points based estimation did not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The evolving visualisation of workflow in our team.</title>
      <link>https://www.ames.world/posts/the-evolving-visualisation-of-workflow-in-our-team/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.ames.world/posts/the-evolving-visualisation-of-workflow-in-our-team/</guid>
      <description>&lt;p&gt;I’m the scrum master for a small team developing a new service for a government agency. The team has been working in an agile way for 17 months. I have been with them for 12 of those months.&lt;/p&gt;
&lt;p&gt;One of the main parts of my role is to help the team visualise the flow of work from idea to delivered. If we can see where work is (and how long it is there), we can see where it is getting blocked and I can go to work with my big unblocking hammer. This article describes the evolution of our workflow board over the past year, the problems we have identified with different approaches and the things we have tried to resolve them.&lt;/p&gt;
&lt;h2 id=&#34;the-team&#34;&gt;The team&lt;/h2&gt;
&lt;p&gt;We are a multi-disciplinary team. Currently we have two user researchers, a designer, a tech architect, a business analyst, five developers, and two testers. Of course it isn’t as simple as that our developers have specialisms and the line between tester and developer is becoming more blurred with the use of test automation. To me this blurring of roles is a good thing, a team can handle blockages in backlogs more effectively if they have some knowledge of the whole process of delivery. We have also had a fair bit of churn in the team, but that’s an article for another day.&lt;br&gt;
Additionally the team has a product owner, we very much treat him as part of the team, and he is very good at considering what the team thinks needs to happen to develop the service, but ultimately he calls the shots.&lt;/p&gt;
&lt;p&gt;We are supported by the webops team who build our underlying server infrastructure. We aren’t totally DevOps yet but we are working on it.&lt;br&gt;
Finally there’s me, my role is to facilitate and guide the team toward meeting their commitments. We use scrum and we operate on two week sprints commitments. A key part of my role is helping the team see where they are in delivering the commitment.&lt;/p&gt;
&lt;h2 id=&#34;the-flow&#34;&gt;The flow&lt;/h2&gt;
&lt;p&gt;As anyone who has ever been stuck behind a tractor will know, you can only go as fast as the slowest thing. That’s why visualising the flow of work from backlog to done is so important. You want to identify where your constraints in delivery are and either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Limit the workflow to protect the constraint (you cant deliver more than the slowest part so don’t swamp it and make it slower).&lt;/li&gt;
&lt;li&gt;Remove the constraint.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A kanban board is a well established way to show flow ours has evolved as we have over the last year.&lt;/p&gt;
&lt;h2 id=&#34;board-1-the-tick-box-board&#34;&gt;Board 1. The tick box board.&lt;/h2&gt;
&lt;p&gt;This board was established when joined the team, personally I didn’t take to it as using ticks to represent where the story is didn’t make blockers stand out to me. It also did nothing to help the team think about limiting their work in progress. Stories further down the list were regularly being started before stories higher up were Done.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/kanban1.jpeg&#34; alt=&#34;&#34; title=&#34;tickbox board, a grid with stories on the y axis and steps to be done on the x. When each task is completed for a given story, the box is ticked&#34;&gt;&lt;/p&gt;
&lt;p&gt;Its not my place to tell a team how to work, its my job to coach and mentor and point out why changes to work methods may be worth trying. The team agreed to try a new board after a particularly difficult sprint.&lt;/p&gt;
&lt;h2 id=&#34;board-2-the-basic-kanban-board&#34;&gt;Board 2. The basic kanban board.&lt;/h2&gt;
&lt;p&gt;Next we tried a fairly basic kanban board with the intention of inspecting and adapting it as we identified our constraints.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/kanban2.jpeg&#34; alt=&#34;&#34; title=&#34;basic kanban board with 4 columns, backlog, wip (work in progress), review and done&#34;&gt;&lt;/p&gt;
&lt;p&gt;The basic kanban board had a few issues. It was easy to lose track of priority as cards moved from one column to the other. It also wasn’t always obvious when a card should move from one column to the next.&lt;/p&gt;
&lt;p&gt;Crucially our team are co-located, the majority of the team are in one place but not everyone. We used pivotal tracker as the source of truth of what was going on with a story. The success of the physical board and its ease of use led to its own problem, the board was updated but often we were forgetting to update pivotal, leading to confusion.&lt;/p&gt;
&lt;h2 id=&#34;board-3-detailed-backlog-board&#34;&gt;Board 3. Detailed backlog board.&lt;/h2&gt;
&lt;p&gt;Horizontal lines were re-introduced to help keep better track of priority. Checklists above each column were also added to assist with decision making on whether the card was ready to be moved on in the flow. The board expanded physically too, a new mini board was added to the left where cards coming up for the next sprint were added to give a better heads up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/kanban3.jpeg&#34; alt=&#34;&#34; title=&#34;detailed kanban board with 5 columns, backlog, wip (work in progress), code review, review and done. To the left of the main board is a seperate column showing what is coming in the following sprint.&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://www.ames.world/images/kanban3a.jpeg&#34; alt=&#34;&#34; title=&#34;Board 3 included a clearer sprint goal to help the team judge whether they had met the overall aim of the sprint.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/kanban3b.jpeg&#34; alt=&#34;&#34; title=&#34;Board 3 also included checklists to help decision making and stimulate conversation before moving cards on.&#34;&gt;&lt;br&gt;
Board 3 helped with the priority issues. The re-addition of horizontal priority lines did lead to some concern that we were going back to the checklist board, however once the team saw cards continued to flow as with the simpler kanban board that was cleared up.&lt;/p&gt;
&lt;p&gt;Board 3 helped provide more clarity but the problem with pivotal falling behind remained.&lt;br&gt;
One crucial problem that all the boards had was that they focused on technical delivery and didn’t include user research and design. This sometimes led to confusion leading to differences between prototypes and production systems.&lt;/p&gt;
&lt;p&gt;Similarly our delivery through to production is not yet continuous. We were signing stories off in our preview environment and then not tracking the work to get the story to production. The work was being done but it was hidden from our estimation for future sprints.&lt;/p&gt;
&lt;h2 id=&#34;board-4-mapping-the-whole-flow-is-one-board-enough&#34;&gt;Board 4. Mapping the whole flow, is one board enough?&lt;/h2&gt;
&lt;p&gt;In order to further improve the board, I decided to whiteboard the end to end process of idea to production. I realised that if we wanted to we could split the flow into different boards.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A board for user research and prototyping&lt;/li&gt;
&lt;li&gt;A standard sprint delivery board.&lt;/li&gt;
&lt;li&gt;A board to track production releases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/flowmap.jpeg&#34; alt=&#34;&#34; title=&#34;Whiteboarded flow map of all the steps from idea to production.&#34;&gt;&lt;br&gt;
The flow diagram wasn&amp;rsquo;t met with universal appeal. There were concerns that it was silo’ing the team, it looked to waterfall’y. But it did stimulate a lot of debate about how we deliver things and our relationship between UR/Prototyping, Delivery and Release.&lt;/p&gt;
&lt;p&gt;Eventually we settled on two boards. A UR/Design board aimed to be a few weeks ahead of the Delivery/Release board in any given sprint. We wanted to solve the pivotal/physical board issue so we switched to trello which gave the closest physical approximation of the flexibility of a physical board in my humble opinion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.ames.world/images/trellour.png&#34; alt=&#34;&#34; title=&#34;Trello user research board.&#34;&gt;&lt;br&gt;
&lt;img src=&#34;https://www.ames.world/images/trellodev.png&#34; alt=&#34;&#34; title=&#34;Trello delivery board&#34;&gt;&lt;br&gt;
We have only been using the boards for one sprint so far, generally they have been well received but it’s early days. There have been a few issues migrating and refining stories in the move from pivotal to trello (not as easy as you might think, I recommend this tool from little blue monkey) and I’m sure some of the columns may change especially in the UR board which we haven’t really defined in this way before.&lt;/p&gt;
&lt;p&gt;There are a few negatives to this board:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have the priority losing issue we had with board 2 back again. We have worked around it by creating a card with a list of the priorities in it for reference if anyone gets uncertain.&lt;/li&gt;
&lt;li&gt;Ideally we want to kill the release part of the flow, this needs to be automated as much as possible a-la Continuous Integration/Continuous Delivery. The fact that visualising the flow in this way helped us to identify and start to address this issue is a positive.&lt;/li&gt;
&lt;li&gt;I have a nagging feeling about the loss of the tangibility of a physical card, I cant put my figure on what it is but there is something tactile about owning something physical.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would be interested in your views and experiences of visualising workflow, what has worked well what hasn&amp;rsquo;t. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
